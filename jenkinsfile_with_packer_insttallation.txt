parameters {
    string(name: 'GITHUB_REPO_URL', defaultValue: '', description: 'GitHub repository URL')
    string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS region where the AMI will be created')
    string(name: 'AWS_ACCESS_KEY_ID', defaultValue: '', description: 'AWS Access Key ID')
    string(name: 'AWS_SECRET_ACCESS_KEY', defaultValue: '', description: 'AWS Secret Access Key')
    string(name: 'S3_BUCKET', defaultValue: '', description: 'Name of the S3 bucket to upload the AMI')
    credentials(name: 'GIT_CREDENTIALS_ID', description: 'Git credentials for repository access', defaultValue: '', type: 'UsernamePassword')
}

pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = params.AWS_REGION
        AWS_ACCESS_KEY_ID = params.AWS_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY = params.AWS_SECRET_ACCESS_KEY
    }
	
	stages {
        stage('Install Packer') {
            steps {
                script {
                    // Install Packer based on the agent's OS
                    if (isUnix()) {
                        sh "curl -o packer.zip https://releases.hashicorp.com/packer/1.7.4/packer_1.7.4_linux_amd64.zip && unzip packer.zip && chmod +x packer && mv packer /usr/local/bin/"
                    } else {
                        bat "curl -o packer.zip https://releases.hashicorp.com/packer/1.7.4/packer_1.7.4_windows_amd64.zip && Expand-Archive -Path packer.zip -DestinationPath . && Move-Item -Path packer.exe -Destination C:\\Windows\\System32\\"
                    }
                }
            }
        }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM', 
                        branches: [[name: '*/master']], 
                        userRemoteConfigs: [[
                            url: params.GITHUB_REPO_URL,
                            credentialsId: params.GIT_CREDENTIALS_ID
                        ]]
                    ])
                }
            }
        }

        stage('Build AMI') {
            steps {
                script {
                    def packerCommand = "packer build -var 'aws_access_key=${env.AWS_ACCESS_KEY_ID}' -var 'aws_secret_key=${env.AWS_SECRET_ACCESS_KEY}' -var 'region=${env.AWS_DEFAULT_REGION}' your_packer_template.hcl"
                    def packerBuild = bat(returnStatus: true, script: packerCommand)

                    if (packerBuild != 0) {
                        error("Packer build failed with exit code ${packerBuild}")
                    }
                }
            }
        }

        stage('Upload AMI to S3') {
            when {
                expression { params.S3_BUCKET != '' }
            }
            steps {
                script {
                    def amiId = sh(script: "aws ec2 describe-images --filters 'Name=tag:Name,Values=your-ami-name' --query 'Images[0].ImageId' --output text", returnStdout: true).trim()

                    def s3UploadCommand = "aws s3 cp $amiId s3://${params.S3_BUCKET}/"
                    def uploadResult = sh(returnStatus: true, script: s3UploadCommand)

                    if (uploadResult != 0) {
                        error("S3 upload failed with exit code ${uploadResult}")
                    }
                }
            }
        }
    }

    post {
        always {
            deleteDir()
        }
    }
}
